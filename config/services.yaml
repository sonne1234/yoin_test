# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
       # autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    #App\:
    #    resource: '../src/*'
    #    exclude: '../src/{Entity,Migrations,Tests,Kernel.php,EventListener,Domain,Services}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    #App\Controller\:
    #    resource: '../src/Controller'
    #    tags: ['controller.service_arguments']

    #App\EventListener\:
    #        resource: '../src/EventListener'

    App\Infrastructure\Persistence\Doctrine\:
            resource: '../src/Infrastructure/Persistence/Doctrine'

    App\EventListener\AuthSuccessHandler:
    App\EventListener\AuthFailureHandler:
    Doctrine\ORM\EntityManager:
        #public: true
    Doctrine\ORM\Configuration:
    Doctrine\Common\EventManager:
    Lexik\Bundle\JWTAuthenticationBundle\Services\JWTManager:
    App\Service\User\UserSignInService:

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #app.EntityManager:
    #    class: Doctrine\ORM\EntityManager
    #    autowire: false 

    app.authentication_success_listener:
        class: App\EventListener\AuthSuccessHandler
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated}

    app.jwt_decoded_listener:
        class: App\EventListener\JwtDecodedListener
        calls:
            - [setRepo, ['@App\Infrastructure\Persistence\Doctrine\DoctrineUserRepository']]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onTokenDecoded }

    

    App\EventListener\UserByEmailDbProvider:
            $userRepository: '@App\Infrastructure\Persistence\Doctrine\DoctrineUserRepository'
    App\EventListener\UserByIdDbProvider:
            $userRepository: '@App\Infrastructure\Persistence\Doctrine\DoctrineUserRepository'

    App\Service\Account\CreateAccountAdminHandler:
            $userRepository: '@App\Infrastructure\Persistence\Doctrine\DoctrineUserRepository'
            $accountRepository: '@App\Infrastructure\Persistence\Doctrine\DoctrineAccountRepository'
            $imageRepository: '@App\Infrastructure\Persistence\Doctrine\DoctrineImageRepository'
            $accountAdminRepository: '@App\Infrastructure\Persistence\Doctrine\DoctrineAccountAdminRepository'
    App\Domain\Account\Transformer\AccountAdminTransformer:
    App\Service\User\UserPasswordEncoder:
    App\Service\Common\GenerateS3FileNameHandler:
            $s3UploadedFileNamesRepository: '@App\Infrastructure\Persistence\Doctrine\DoctrineS3UploadedFileNameRepository'
    App\Service\Common\UploadImageHandler:
            $imageRepository: '@App\Infrastructure\Persistence\Doctrine\DoctrineImageRepository'
    App\Service\S3Bucket:
        calls:
            - method: setS3BucketName
              arguments:
                  - 'prod-yoin' #%aws.s3.bucket%

    App\Service\VichUploaderNamer:
    App\Service\Common\GenerateFileUploadUrlHandler:

    SimpleBus\DoctrineORMBridge\EventListener\CollectsEventsFromEntities:
        tags:
            - { name: doctrine.event_subscriber, connection: default }
    
    
